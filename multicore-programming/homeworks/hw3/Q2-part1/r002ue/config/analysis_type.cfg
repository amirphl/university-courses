<?xml version="1.0" encoding="UTF-8"?>
<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:exsl="http://exslt.org/common" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:str="http://exslt.org/strings" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <internal>
  <name>%MicroarchitectureExplorationAtypeName</name>
  <shortName>%MicroarchitectureExplorationAtypeShortName</shortName>
  <description>%MicroarchitectureExplorationAtypeDescription</description>
  <abbreviation>ue</abbreviation>
  <alias>uarch-exploration</alias>
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>1</int:contentVersion>
  <property name="helpId">configs.event_based_analysis_f1103</property>
 </internal>
 <prerequisites xsl:version="1.0" str:keep_str_namespace="" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:if test="exsl:ctx('targetOS', '') = 'INTEGRITY'">
   <xsl:value-of select="exsl:error('%ThisAnalysisTypeIsNotApplicable')"/>
  </xsl:if>
  <xsl:copy-of select="document('config://analysis_type/include/require_connection.xsl?connections=group_generic,group_mic,tcp')"/>
 </prerequisites>
 <knobs xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:variable name="commonKnobs" select="document('config://analysis_type/include/knobs.xsl?pmuModeSwitchCheck=true')"/>
  <xsl:copy-of select="$commonKnobs//knobs/doubleKnob[@id='samplingInterval']"/>
  <groupKnob id="groupForSelectMetrics">
   <xsl:if test="exsl:ctx('PMU') = 'snb' or exsl:ctx('PMU') = 'snbep'">
    <xsl:attribute name="boolean:visible">false</xsl:attribute>
   </xsl:if>
   <description>%GroupForSelectMetricsDescription</description>
   <experimental>ge-fine-grain</experimental>
   <knobs>
    <xsl:if test="exsl:ctx('PMU') = 'ivybridge' or exsl:ctx('PMU') = 'ivytown' or exsl:ctx('PMU') = 'haswell' or exsl:ctx('PMU') = 'haswell_server' or exsl:ctx('PMU') = 'crystalwell' or exsl:ctx('PMU') = 'broadwell' or exsl:ctx('PMU') = 'broadwell_server' or exsl:ctx('PMU') = 'skylake' or exsl:ctx('PMU') = 'skylake_server' or exsl:ctx('PMU') = 'kabylake' or exsl:ctx('PMU') = 'cannonlake'">
     <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectFrontendBound']"/>
     <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectBadSpeculation']"/>
     <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectBackendBoundWIC']"/>
     <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectMemoryBound']"/>
     <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectCoreBound']"/>
     <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectRetiring']"/>
    </xsl:if>
    <xsl:if test="((exsl:ctx('PMU') = 'silvermont' or exsl:ctx('PMU') = 'airmont' or exsl:ctx('PMU') = 'goldmont' or exsl:ctx('PMU') = 'goldmont_plus' or exsl:ctx('PMU') = 'atom') and not(contains(exsl:ctx('androidBoardPlatform', ''), 'sofia'))) or exsl:ctx('PMU') = 'knl'">
     <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectFrontendBound']"/>
     <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectBadSpeculation']"/>
     <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectBackendBound']"/>
     <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectRetiring']"/>
    </xsl:if>
   </knobs>
  </groupKnob>
  <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectMemoryBW']"/>
  <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
   <xsl:choose>
    <xsl:when test="(exsl:ctx('PMU') = 'corei7') or (exsl:ctx('PMU') = 'corei7wsp') or (exsl:ctx('PMU') = 'corei7wdp') or (exsl:ctx('PMU') = 'corei7b') or (exsl:ctx('PMU') = 'core2') or (exsl:ctx('PMU') = 'core2p')">
     <defaultValue>%HardwareIssuesViewpointName</defaultValue>
    </xsl:when>
    <xsl:otherwise>
     <defaultValue>%SNBGeneralExplorationViewpointName</defaultValue>
    </xsl:otherwise>
   </xsl:choose>
  </stringKnob>
  <xsl:if test="exsl:ctx('targetOS', '') != 'QNX'">
   <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='dramBandwidthLimitsAT']"/>
  </xsl:if>
  <xsl:copy-of select="$commonKnobs//knobs/enumKnob[@id='pmuSamplingCountSwitch']"/>
 </knobs>
 <analysis xsl:version="1.0" exsl:keep_exsl_namespace="" str:keep_str_namespace="" syntax="norules">
  <xsl:copy-of select="document('config://analysis_type/include/prerequisites.xsl')/pmu_prerequisites/*"/>
  <xsl:if test="(exsl:ctx('PMU') = 'haswell' or exsl:ctx('PMU') = 'haswell_server' or exsl:ctx('PMU') = 'crystalwell') and                    (exsl:ctx('isHTEnabled', 0) or (exsl:ctx('logicalCPUCount', 1) &gt; exsl:ctx('physicalCoreCount', 1)))">
   <xsl:value-of select="exsl:warning('%HTisONAT')"/>
  </xsl:if>
  <collector id="runsa">
   <xsl:if test="exsl:ctx('targetOS')='Linux' and not(exsl:ctx('isSEPDriverAvailable', 0)) and                   (exsl:ctx('LinuxPerfCredentials', 'NotAvailable')='Kernel' or                    exsl:ctx('LinuxPerfCredentials', 'NotAvailable')='User' or                    not(contains(exsl:ctx('LinuxPerfCapabilities', ''), 'format')))">
    <boolean:collectorKnob knob="perfForceSystemWide">true</boolean:collectorKnob>
   </xsl:if>
   <boolean:collectorKnob knob="cpuGpuUsageData">true</boolean:collectorKnob>
   <xsl:choose>
    <xsl:when test="exsl:ctx('pmuSamplingCountSwitch', 'detailed') = 'summary'">
     <collectorKnob knob="collectFramesMode">false</collectorKnob>
     <boolean:collectorKnob knob="useCountingMode">true</boolean:collectorKnob>
    </xsl:when>
    <xsl:otherwise>
     <boolean:collectorKnob knob="collectUserTasksEventsCountersMode">true</boolean:collectorKnob>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:variable name="tmamFile">
    <xsl:text>config://analysis_type/include/tmam/</xsl:text>
    <xsl:value-of select="exsl:ctx('PMU', 'empty')"/>
    <xsl:text>.cfg</xsl:text>
   </xsl:variable>
   <xsl:variable name="tmamEventsFile">
    <xsl:choose>
     <xsl:when test="exsl:is_file_exist(string($tmamFile))">
      <xsl:value-of select="$tmamFile"/>
     </xsl:when>
     <xsl:otherwise>
      <xsl:text>config://analysis_type/include/tmam/empty.cfg</xsl:text>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:variable>
   <xsl:variable name="geEvents">
    <xsl:choose>
     <xsl:when test="(exsl:ctx('PMU') = 'silvermont' or exsl:ctx('PMU') = 'airmont') and contains(exsl:ctx('androidBoardPlatform', ''), 'sofia')">
      <xsl:text>,BACLEARS.ALL,BR_INST_RETIRED.FAR_BRANCH,BR_MISP_RETIRED.ALL_BRANCHES,CPU_CLK_UNHALTED.REF_TSC,CPU_CLK_UNHALTED.CORE,CPU_CLK_UNHALTED.CORE_P,CYCLES_DIV_BUSY.ALL,DECODE_RESTRICTION.PREDECODE_WRONG,FETCH_STALL.ICACHE_FILL_PENDING_CYCLES,ICACHE.MISSES,INST_RETIRED.ANY,MACHINE_CLEARS.FP_ASSIST,MACHINE_CLEARS.MEMORY_ORDERING,MACHINE_CLEARS.SMC,MEM_UOPS_RETIRED.HITM,MEM_UOPS_RETIRED.L2_HIT_LOADS,MEM_UOPS_RETIRED.L2_MISS_LOADS,MS_DECODED.MS_ENTRY,NO_ALLOC_CYCLES.MISPREDICTS,NO_ALLOC_CYCLES.NOT_DELIVERED,PAGE_WALKS.D_SIDE_CYCLES,PAGE_WALKS.D_SIDE_WALKS,PAGE_WALKS.I_SIDE_CYCLES,PAGE_WALKS.I_SIDE_WALKS,REHABQ.LD_BLOCK_ST_FORWARD,REHABQ.LD_SPLITS,REHABQ.ST_SPLITS,UOPS_RETIRED.ALL,UOPS_RETIRED.MS</xsl:text>
      <xsl:if test="exsl:ctx('Hypervisor', 'None') = 'None' or exsl:ctx('Hypervisor', 'None') = 'Microsoft Hv'">,OFFCORE_RESPONSE:request=BUS_LOCKS:response=ANY_RESPONSE</xsl:if>
     </xsl:when>
     <xsl:when test="exsl:ctx('PMU') = 'ivybridge' or exsl:ctx('PMU') = 'ivytown' or exsl:ctx('PMU') = 'haswell' or exsl:ctx('PMU') = 'haswell_server' or exsl:ctx('PMU') = 'crystalwell' or exsl:ctx('PMU') = 'broadwell' or exsl:ctx('PMU') = 'broadwell_server' or exsl:ctx('PMU') = 'skylake' or exsl:ctx('PMU') = 'skylake_server' or exsl:ctx('PMU') = 'kabylake' or exsl:ctx('PMU') = 'cannonlake' or ((exsl:ctx('PMU') = 'silvermont' or exsl:ctx('PMU') = 'airmont' or exsl:ctx('PMU') = 'goldmont' or exsl:ctx('PMU') = 'goldmont_plus' or exsl:ctx('PMU') = 'atom') and not(contains(exsl:ctx('androidBoardPlatform', ''), 'sofia'))) or exsl:ctx('PMU') = 'knl'">
      <xsl:variable name="baseEvents">
       <xsl:choose>
        <xsl:when test="exsl:is_experimental('ge-fine-grain') and not(exsl:ctx('PMU') = 'snb' or exsl:ctx('PMU') = 'snbep')">
         <xsl:value-of select="document($tmamEventsFile)/main/Top_Level_Tree/BaseEvents"/>
         <xsl:if test="exsl:ctx('collectFrontendBound', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Front_End_Bound_Tree/BaseEvents"/>
         </xsl:if>
         <xsl:if test="exsl:ctx('collectBadSpeculation', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Bad_Speculation_Tree/BaseEvents"/>
         </xsl:if>
         <xsl:if test="exsl:ctx('collectBackendBoundWIC', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Back_End_Bound_Tree/BaseEvents"/>
         </xsl:if>
         <xsl:if test="exsl:ctx('collectBackendBound', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Back_End_Bound_Tree/BaseEvents"/>
         </xsl:if>
         <xsl:if test="exsl:ctx('collectMemoryBound', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Memory_Bound_Tree/BaseEvents"/>
         </xsl:if>
         <xsl:if test="exsl:ctx('collectCoreBound', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Core_Bound_Tree/BaseEvents"/>
         </xsl:if>
         <xsl:if test="exsl:ctx('collectRetiring', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Retiring_Tree/BaseEvents"/>
         </xsl:if>
        </xsl:when>
        <xsl:otherwise>
         <xsl:value-of select="document($tmamEventsFile)/main/root_tree/BaseEvents"/>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:variable>
      <xsl:variable name="hvEvents">
       <xsl:choose>
        <xsl:when test="exsl:is_experimental('ge-fine-grain') and not(exsl:ctx('PMU') = 'snb' or exsl:ctx('PMU') = 'snbep')">
         <xsl:value-of select="document($tmamEventsFile)/main/Top_Level_Tree/HypervisorEvents"/>
         <xsl:if test="exsl:ctx('collectFrontendBound', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Front_End_Bound_Tree/HypervisorEvents"/>
         </xsl:if>
         <xsl:if test="exsl:ctx('collectBadSpeculation', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Bad_Speculation_Tree/HypervisorEvents"/>
         </xsl:if>
         <xsl:if test="exsl:ctx('collectBackendBoundWIC', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Back_End_Bound_Tree/BaseEvents"/>
         </xsl:if>
         <xsl:if test="exsl:ctx('collectBackendBound', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Back_End_Bound_Tree/HypervisorEvents"/>
         </xsl:if>
         <xsl:if test="exsl:ctx('collectMemoryBound', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Memory_Bound_Tree/HypervisorEvents"/>
         </xsl:if>
         <xsl:if test="exsl:ctx('collectCoreBound', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Core_Bound_Tree/HypervisorEvents"/>
         </xsl:if>
         <xsl:if test="exsl:ctx('collectRetiring', 0)">
          <xsl:value-of select="document($tmamEventsFile)/main/Retiring_Tree/HypervisorEvents"/>
         </xsl:if>
        </xsl:when>
        <xsl:otherwise>
         <xsl:value-of select="document($tmamEventsFile)/main/root_tree/HypervisorEvents"/>
        </xsl:otherwise>
       </xsl:choose>
      </xsl:variable>
      <xsl:choose>
       <xsl:when test="exsl:ctx('Hypervisor', 'None') = 'None' or exsl:ctx('Hypervisor', 'None') = 'Microsoft Hv'">
        <xsl:value-of select="concat($baseEvents,$hvEvents)"/>
       </xsl:when>
       <xsl:otherwise>
        <xsl:value-of select="$baseEvents"/>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:when>
     <xsl:otherwise>
      <xsl:variable name="baseEvents" select="document($tmamEventsFile)/main/root_tree/BaseEvents"/>
      <xsl:variable name="hvEvents" select="document($tmamEventsFile)/main/root_tree/HypervisorEvents"/>
      <xsl:choose>
       <xsl:when test="exsl:ctx('Hypervisor', 'None') = 'None' or exsl:ctx('Hypervisor', 'None') = 'Microsoft Hv'">
        <xsl:value-of select="concat($baseEvents,$hvEvents)"/>
       </xsl:when>
       <xsl:otherwise>
        <xsl:value-of select="$baseEvents"/>
       </xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:variable>
   <xsl:variable name="cpiEvents" select="document('config://analysis_type/include/common_events.xsl')/events/cpi"/>
   <collectorKnob knob="pmuEventConfig">
    <xsl:value-of select="concat($cpiEvents,$geEvents)"/>
   </collectorKnob>
   <xsl:if test="exsl:ctx('collectMemoryBW', 0) and exsl:ctx('pmuSamplingCountSwitch', 'detailed') = 'detailed'">
    <boolean:collectorKnob knob="collectMemBandwidth">true</boolean:collectorKnob>
    <boolean:collectorKnob knob="enableDramBandwidthLimitsWarning">true</boolean:collectorKnob>
    <xsl:if test="exsl:ctx('PMU') != 'knl' and exsl:ctx('dramBandwidthLimitsAT', 0)">
     <collectorKnob knob="dramBandwidthLimits">true</collectorKnob>
    </xsl:if>
   </xsl:if>
   <collectorKnob knob="pmuSamplingInterval">
    <xsl:value-of select="format-number(exsl:ctx('samplingInterval', 1), '#.####')"/>
   </collectorKnob>
  </collector>
 </analysis>
</bag>
